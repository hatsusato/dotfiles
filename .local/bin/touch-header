#!/bin/bash

set -eu
source "${BASH_SOURCE%/*}"/function/parse-opts

usage() {
  cat <<EOF >&2
USAGE: ${0##*/} [-c] [-x] FILE
    initialize header file with include guard
    and touch its corresponding source file

    -c  force C mode
    -x  force C++ mode
EOF
  exit 1
}
echo-ext() {
  local ext=c
  [[ ${1-} == *.hpp ]] && ext=cpp
  [[ $modec ]] && ext=c
  [[ $modex ]] && ext=cpp
  echo $ext
}
process-ext() {
  local name=${1-} suffix
  if [[ $name == *.[ch]?(pp) ]]; then
    name=${1%.*}
    suffix=${1##*.[ch]}
    style=c$suffix
    [[ $modec ]] && style=c
    [[ $modex ]] && style=cpp
  else
    style=c
    [[ $modec ]] && style=c
    [[ $modex ]] && style=cpp
    suffix=${style#c}
  fi
  header=$name.h$suffix
  source=$name.c$suffix
}
generate-header() {
  local uuid guard comment=
  uuid=$(uuidgen -r | tr '[:lower:]-' '[:upper:]_')
  guard=INCLUDE_GUARD_$uuid
  case $style in
    c) comment=" /* $guard */";;
    cpp) comment=" // $guard";;
  esac
  cat <<EOF
#ifndef $guard
#define $guard
#endif$comment
EOF
}
generate-source() {
  cat <<EOF
#include "${header##*/}"
EOF
}
generate() {
  local -n ref=$1
  if [[ -f $ref ]]; then
    touch "$ref"
  else
    generate-$1 | tee "$ref"
  fi
}
main() {
  local modec= modex= ext
  local -A opts=([c]=modec [x]=modex)
  parse-opts "$@" || shift $?
  local style header source
  process-ext "$@"
  declare -p header source
  case $# in
    0) generate-header;;
    1) generate header
       generate source >/dev/null;;
    *) usage;;
  esac
}

main "$@"
